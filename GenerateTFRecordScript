{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"GenerateTFRecordScript","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPmLLAiDWTSnU0vOjYBilvx"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"Un1Xrnaq_uWq"},"outputs":[],"source":["# ADAPTED FROM: https://github.com/nicknochnack/GenerateTFRecord/blob/main/generate_tfrecord.py\n","# CHANGES AT LINES 92-95\n","# EXPLANATION FOR THESE CHANGES AT THE END\n","\n","\"\"\" Sample TensorFlow XML-to-TFRecord converter\n","\n","usage: generate_tfrecord.py [-h] [-x XML_DIR] [-l LABELS_PATH] [-o OUTPUT_PATH] [-i IMAGE_DIR] [-c CSV_PATH]\n","\n","optional arguments:\n","  -h, --help            show this help message and exit\n","  -x XML_DIR, --xml_dir XML_DIR\n","                        Path to the folder where the input .xml files are stored.\n","  -l LABELS_PATH, --labels_path LABELS_PATH\n","                        Path to the labels (.pbtxt) file.\n","  -o OUTPUT_PATH, --output_path OUTPUT_PATH\n","                        Path of output TFRecord (.record) file.\n","  -i IMAGE_DIR, --image_dir IMAGE_DIR\n","                        Path to the folder where the input image files are stored. Defaults to the same directory as XML_DIR.\n","  -c CSV_PATH, --csv_path CSV_PATH\n","                        Path of output .csv file. If none provided, then no file will be written.\n","\"\"\"\n","\n","import os\n","import glob\n","import pandas as pd\n","import io\n","import xml.etree.ElementTree as ET\n","import argparse\n","\n","os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'    # Suppress TensorFlow logging (1)\n","import tensorflow.compat.v1 as tf\n","from PIL import Image\n","from object_detection.utils import dataset_util, label_map_util\n","from collections import namedtuple\n","\n","# Initiate argument parser\n","parser = argparse.ArgumentParser(\n","    description=\"Sample TensorFlow XML-to-TFRecord converter\")\n","parser.add_argument(\"-x\",\n","                    \"--xml_dir\",\n","                    help=\"Path to the folder where the input .xml files are stored.\",\n","                    type=str)\n","parser.add_argument(\"-l\",\n","                    \"--labels_path\",\n","                    help=\"Path to the labels (.pbtxt) file.\", type=str)\n","parser.add_argument(\"-o\",\n","                    \"--output_path\",\n","                    help=\"Path of output TFRecord (.record) file.\", type=str)\n","parser.add_argument(\"-i\",\n","                    \"--image_dir\",\n","                    help=\"Path to the folder where the input image files are stored. \"\n","                         \"Defaults to the same directory as XML_DIR.\",\n","                    type=str, default=None)\n","parser.add_argument(\"-c\",\n","                    \"--csv_path\",\n","                    help=\"Path of output .csv file. If none provided, then no file will be \"\n","                         \"written.\",\n","                    type=str, default=None)\n","\n","args = parser.parse_args()\n","\n","if args.image_dir is None:\n","    args.image_dir = args.xml_dir\n","\n","label_map = label_map_util.load_labelmap(args.labels_path)\n","label_map_dict = label_map_util.get_label_map_dict(label_map)\n","\n","\n","def xml_to_csv(path):\n","    \"\"\"Iterates through all .xml files (generated by labelImg) in a given directory and combines\n","    them in a single Pandas dataframe.\n","\n","    Parameters:\n","    ----------\n","    path : str\n","        The path containing the .xml files\n","    Returns\n","    -------\n","    Pandas DataFrame\n","        The produced dataframe\n","    \"\"\"\n","\n","    xml_list = []\n","    for xml_file in glob.glob(path + '/*.xml'):\n","        tree = ET.parse(xml_file)\n","        root = tree.getroot()\n","        for member in root.findall('object'):\n","            value = (root.find('filename').text,\n","                     int(root.find('size')[0].text),\n","                     int(root.find('size')[1].text),\n","                     member[0].text,\n","                     int(member[4][0].text), #Changed 4 to 5\n","                     int(member[4][1].text), #Changed 4 to 5\n","                     int(member[4][2].text), #Changed 4 to 5\n","                     int(member[4][3].text) #Changed 4 to 5\n","                     )\n","            xml_list.append(value)\n","    column_name = ['filename', 'width', 'height',\n","                   'class', 'xmin', 'ymin', 'xmax', 'ymax']\n","    xml_df = pd.DataFrame(xml_list, columns=column_name)\n","    return xml_df\n","\n","\n","def class_text_to_int(row_label):\n","    return label_map_dict[row_label]\n","\n","\n","def split(df, group):\n","    data = namedtuple('data', ['filename', 'object'])\n","    gb = df.groupby(group)\n","    return [data(filename, gb.get_group(x)) for filename, x in zip(gb.groups.keys(), gb.groups)]\n","\n","\n","def create_tf_example(group, path):\n","    with tf.gfile.GFile(os.path.join(path, '{}'.format(group.filename)), 'rb') as fid:\n","        encoded_jpg = fid.read()\n","    encoded_jpg_io = io.BytesIO(encoded_jpg)\n","    image = Image.open(encoded_jpg_io)\n","    width, height = image.size\n","\n","    filename = group.filename.encode('utf8')\n","    image_format = b'jpg'\n","    xmins = []\n","    xmaxs = []\n","    ymins = []\n","    ymaxs = []\n","    classes_text = []\n","    classes = []\n","\n","    for index, row in group.object.iterrows():\n","        xmins.append(row['xmin'] / width)\n","        xmaxs.append(row['xmax'] / width)\n","        ymins.append(row['ymin'] / height)\n","        ymaxs.append(row['ymax'] / height)\n","        classes_text.append(row['class'].encode('utf8'))\n","        classes.append(class_text_to_int(row['class']))\n","\n","    tf_example = tf.train.Example(features=tf.train.Features(feature={\n","        'image/height': dataset_util.int64_feature(height),\n","        'image/width': dataset_util.int64_feature(width),\n","        'image/filename': dataset_util.bytes_feature(filename),\n","        'image/source_id': dataset_util.bytes_feature(filename),\n","        'image/encoded': dataset_util.bytes_feature(encoded_jpg),\n","        'image/format': dataset_util.bytes_feature(image_format),\n","        'image/object/bbox/xmin': dataset_util.float_list_feature(xmins),\n","        'image/object/bbox/xmax': dataset_util.float_list_feature(xmaxs),\n","        'image/object/bbox/ymin': dataset_util.float_list_feature(ymins),\n","        'image/object/bbox/ymax': dataset_util.float_list_feature(ymaxs),\n","        'image/object/class/text': dataset_util.bytes_list_feature(classes_text),\n","        'image/object/class/label': dataset_util.int64_list_feature(classes),\n","    }))\n","    return tf_example\n","\n","\n","def main(_):\n","\n","    writer = tf.python_io.TFRecordWriter(args.output_path)\n","    path = os.path.join(args.image_dir)\n","    examples = xml_to_csv(args.xml_dir)\n","    grouped = split(examples, 'filename')\n","    for group in grouped:\n","        tf_example = create_tf_example(group, path)\n","        writer.write(tf_example.SerializeToString())\n","    writer.close()\n","    print('Successfully created the TFRecord file: {}'.format(args.output_path))\n","    if args.csv_path is not None:\n","        examples.to_csv(args.csv_path, index=None)\n","        print('Successfully created the CSV file: {}'.format(args.csv_path))\n","\n","\n","if __name__ == '__main__':\n","    tf.app.run()\n","\n","################################################################################\n","\n","# The XML file is in the form:\n","\"\"\"\n","<annotation>\n","    <folder>images</folder>\n","    <filename>Cars1.png</filename>\n","    <size>\n","        <width>400</width>\n","        <height>248</height>\n","        <depth>3</depth>\n","    </size>\n","    <segmented>0</segmented>\n","    <object>\n","        <name>licence</name>\n","        <pose>Unspecified</pose>\n","        <truncated>0</truncated>\n","        <occluded>0</occluded>\n","        <difficult>0</difficult>\n","        <bndbox>\n","            <xmin>134</xmin>\n","            <ymin>128</ymin>\n","            <xmax>262</xmax>\n","            <ymax>160</ymax>\n","        </bndbox>\n","    </object>\n","</annotation>\n","\"\"\"\n","\n","# I want to access xmin, ymin, xmax and ymax, which is stored in the bounding-box\n","# the bounding-box is at the fifth index and not at the fourth, hence the change from 4 to 5"]}]}